text_sensor:
#실외 센서
#실외 기상 텍스트 센서
  - platform: template
    name: "${name} PM2.5 Grade"
    id: pm25_grade
    internal: true
    icon: mdi:blur-linear
    update_interval: never
    lambda: |-
      if (id(pm25_outdoor).state <= 8) {
        return {"쾌적"};
      } else if (id(pm25_outdoor).state <= 15 && id(pm25_outdoor).state >= 9){
        return {"좋음"};
      } else if (id(pm25_outdoor).state <= 20 && id(pm25_outdoor).state >= 16){
        return {"양호"};
      } else if (id(pm25_outdoor).state <= 25 && id(pm25_outdoor).state >= 21){
        return {"보통"};
      } else if (id(pm25_outdoor).state <= 37 && id(pm25_outdoor).state >= 26){
        return {"나쁨"};
      } else if (id(pm25_outdoor).state <= 50 && id(pm25_outdoor).state >= 38){
        return {"매우나쁨"};
      } else if (id(pm25_outdoor).state <= 75 && id(pm25_outdoor).state >= 51){
        return {"아주나쁨"};
      } else if (id(pm25_outdoor).state > 76){
        return {"최악"};
      } else {
        return {"알 수 없음"};
      }

    on_value: 
      - if:
          condition:
            - lambda: 'return id(naver_weather_ozongrade_1).state == "쾌적";'
          then:
            - lvgl.label.update:
                id: home_weather_pm25
                text: "#0285D1 쾌적#"
      - if:
          condition:
            - lambda: 'return id(naver_weather_ozongrade_1).state == "좋음";'
          then:
            - lvgl.label.update:
                id: home_weather_pm25
                text: "#02A8D1 좋음#"
      - if:
          condition:
            - lambda: 'return id(naver_weather_ozongrade_1).state == "양호";'
          then:
            - lvgl.label.update:
                id: home_weather_pm25
                text: "#02d189 양호#"
      - if:
          condition:
            - lambda: 'return id(naver_weather_ozongrade_1).state == "보통";'
          then:
            - lvgl.label.update:
                id: home_weather_pm25
                text: "#02D109 보통#"
      - if:
          condition:
            - lambda: 'return id(naver_weather_ozongrade_1).state == "나쁨";'
          then:
            - lvgl.label.update:
                id: home_weather_pm25
                text: "#E86E02 나쁨#"
      - if:
          condition:
            - lambda: 'return id(naver_weather_ozongrade_1).state == "매우나쁨";'
          then:
            - lvgl.label.update:
                id: home_weather_pm25
                text: "#E84302 매우나쁨#"
      - if:
          condition:
            - lambda: 'return id(naver_weather_ozongrade_1).state == "아주나쁨";'
          then:
            - lvgl.label.update:
                id: home_weather_pm25
                text: "#AB0202 아주나쁨#"
      - if:
          condition:
            - lambda: 'return id(naver_weather_ozongrade_1).state == "최악";'
          then:
            - lvgl.label.update:
                id: home_weather_pm25
                text: "#A9A9A9 최악#"
            
  - platform: template
    name: "${name} PM10 Grade"
    id: pm10_grade
    internal: true
    icon: mdi:blur
    update_interval: never
    lambda: |-
      if (id(pm10_outdoor).state <= 15) {
       return {"쾌적"};
      } else if (id(pm10_outdoor).state <= 30 && id(pm10_outdoor).state >= 16){
       return {"좋음"};
      } else if (id(pm10_outdoor).state <= 40 && id(pm10_outdoor).state >= 31){
       return {"양호"};
      } else if (id(pm10_outdoor).state <= 50 && id(pm10_outdoor).state >= 41){
       return {"보통"};
      } else if (id(pm10_outdoor).state <= 75 && id(pm10_outdoor).state >= 51){
       return {"나쁨"};
      } else if (id(pm10_outdoor).state <= 76 && id(pm10_outdoor).state >= 100){
       return {"매우나쁨"};
      } else if (id(pm10_outdoor).state <= 150 && id(pm10_outdoor).state >= 101){
       return {"아주나쁨"};
      } else if (id(pm10_outdoor).state > 151){
       return {"최악"};
      } else {
        return {"알 수 없음"};
      }

    on_value: 
      - if:
          condition:
            - lambda: 'return id(naver_weather_ozongrade_1).state == "쾌적";'
          then:
            - lvgl.label.update:
                id: home_weather_pm10
                text: "#0285D1 쾌적#"
      - if:
          condition:
            - lambda: 'return id(naver_weather_ozongrade_1).state == "좋음";'
          then:
            - lvgl.label.update:
                id: home_weather_pm10
                text: "#02A8D1 좋음#"
      - if:
          condition:
            - lambda: 'return id(naver_weather_ozongrade_1).state == "양호";'
          then:
            - lvgl.label.update:
                id: home_weather_pm10
                text: "#02d189 양호#"
      - if:
          condition:
            - lambda: 'return id(naver_weather_ozongrade_1).state == "보통";'
          then:
            - lvgl.label.update:
                id: home_weather_pm10
                text: "#02D109 보통#"
      - if:
          condition:
            - lambda: 'return id(naver_weather_ozongrade_1).state == "나쁨";'
          then:
            - lvgl.label.update:
                id: home_weather_pm10
                text: "#E86E02 나쁨#"
      - if:
          condition:
            - lambda: 'return id(naver_weather_ozongrade_1).state == "매우나쁨";'
          then:
            - lvgl.label.update:
                id: home_weather_pm10
                text: "#E84302 매우나쁨#"
      - if:
          condition:
            - lambda: 'return id(naver_weather_ozongrade_1).state == "아주나쁨";'
          then:
            - lvgl.label.update:
                id: home_weather_pm10
                text: "#AB0202 아주나쁨#"
      - if:
          condition:
            - lambda: 'return id(naver_weather_ozongrade_1).state == "최악";'
          then:
            - lvgl.label.update:
                id: home_weather_pm10
                text: "#A9A9A9 최악#"

binary_sensor:
#실외 센서
  - platform: homeassistant
    entity_id: binary_sensor.weather_sensor_rain_sensor
    id: rain_sensor
    on_state: 
      then:
        - if:
            condition: 
              and:
                - binary_sensor.is_on: rain_sensor
                - lvgl.is_idle:
                    timeout: 20s
            then:
              - if:
                  condition: 
                    - light.is_off: backlight
                  then:
                    - light.turn_on: backlight
              - script.execute: hide_all_card
              - lvgl.image.update:
                  id: rain_state
                  src: rainy
              - lvgl.widget.show: pop_up
              - lvgl.widget.show: rain_state
              - lvgl.label.update:
                  id: pop_up_text
                  text: "비 내림"
              - delay: 10s
              - lvgl.widget.hide: rain_state
              - lvgl.image.update:
                  id: rain_state
                  src: blank
              - lvgl.widget.hide: pop_up

sensor:
#실외 센서
  - platform: homeassistant
    entity_id: sensor.weather_sensor_internal_temperature
    id: temperature_outdoor 

  - platform: homeassistant
    entity_id: sensor.weather_sensor_humidity
    id: humidity_outdoor

  - platform: homeassistant
    entity_id: sensor.weather_sensor_pm_2_5mm
    id: pm25_outdoor
    on_value: 
      - component.update: pm25_grade    
  - platform: homeassistant
    entity_id: sensor.weather_sensor_pm_10_0mm
    id: pm10_outdoor
    on_value: 
      - component.update: pm10_grade