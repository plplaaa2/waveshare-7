substitutions:
  board: esp32-s3-devkitc-1
  name: "waveshare-esp32-s3-lcd-7"
  device_description: Waveshare ESP32 S3 LCD 7'
  type: esp-idf
  s_ip: # Your device Static IP      
  latitude: ""    
  longitude: ""  

esphome:
  name: "${name}"
  comment: "${device_description}"
  platformio_options:
    build_flags: "-DBOARD_HAS_PSRAM"
    board_build.arduino.memory_type: qio_opi
    board_build.flash_mode: dio
    #board_upload.maximum_ram_size: 524288
    board_upload.maximum_size: 8388608
  on_boot: 
    then:
      - light.turn_on: 
          id: backlight
          brightness: !lambda return id(backlight_brightness).state / 100;
          
esp32:
  board: ${board}
  framework:  
    type: ${type}
    sdkconfig_options:
      COMPILER_OPTIMIZATION_SIZE: y
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y   
  flash_size: 8MB
  partitions: "default_8MB.csv"
      
psram:
  mode: octal
  speed: 80MHz

# Enable logging
logger:
  level: DEBUG
  #baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key
  on_client_connected:
    - if:
        condition:
          lambda: 'return (0 == client_info.find("Home Assistant "));'
        then:
          - lvgl.widget.show: wifi_connected
          - lvgl.widget.hide: wifi_disconnected
          
  on_client_disconnected:
    - if:
        condition:
          lambda: 'return (0 == client_info.find("Home Assistant "));'
        then:
          - lvgl.widget.hide: wifi_connected
          - lvgl.widget.show: wifi_disconnected

ota:
  - platform: esphome
    password: !secret hotspot_pw

wifi:
  id: iptime
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: HIGH
  fast_connect: true
  manual_ip: 
   static_ip: $s_ip
   gateway: 192.168.1.1
   subnet: 255.255.255.0
   dns1: 1.1.1.1
   dns2: 8.8.8.8

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${name} hotspot"
    password: !secret hotspot_pw

captive_portal:

i2c:
  scl: GPIO9
  sda: GPIO8
  scan: True

#uart:
 # tx_pin: GPIO43
  #rx_pin: GPIO44
  #baud_rate: 9600

packages:
  # base
  base: !include base.yaml
  display: !include display.yaml
  fonts: !include fonts.yaml
  lvgl: !include lvgl_base.yaml
  #pages
  menu: !include pages/menu.yaml
  weather: !include pages/weather.yaml
  climate: !include pages/climate.yaml
  blind: !include pages/blind.yaml

time:
  - platform: sntp
    id: time_comp
    timezone: UTC-9
     - time.bora.net
     - time.windows.com
     - 2.pool.ntp.org
    on_time_sync:
      - script.execute: time_update
      - script.execute: date_update
    on_time:
      - minutes: '*'
        seconds: '0'
        then:
          - script.execute: time_update
          - script.execute: date_update
sun:
  id: sun_time
  latitude: $latitude     
  longitude: $longitude 

button:    
  - platform: restart
    name: "${name} Restart"
    id: re_start
    entity_category: diagnostic

text_sensor:
  - platform: version
    name: "${name} Esphome Version"
  - platform: wifi_info
    ip_address:
     name: ESP IP Address
    mac_address:
      name: ESP Mac Wifi Address
  - platform: sun
    name: Sun Rise
    id: sun_rise
    type: sunrise
    internal: True
    on_value:
      - lvgl.label.update:
          id: home_weather_sunrise
          text: 
            format: "#FFA500 \U000F059C# %s"
            args: [ x.c_str() ]
            
  - platform: sun
    name: Sun set
    id: sun_set
    type: sunset
    internal: True
    on_value:
      - lvgl.label.update:
          id: home_weather_sunset
          text: 
            format: "%s #FF0000 \U000F059B#"
            args: [ x.c_str() ]          

binary_sensor:
  - platform: status
    name: "${name} Connection Status"

sensor:
   # 와이파이 신호 세기
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    internal: true
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "${name} WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""
    icon: mdi:wifi
